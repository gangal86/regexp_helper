//En
export default {
  constructorTabTitle: 'Constructor',
  cheatSheetTabTitle: 'Cheat sheet',
  labelRegexpText: 'Regular expression text:',
  labelBeforeSearchingText: 'Before the text you are looking for there is:',
  labelStartSearchingText: 'The text you are looking for begins with:',
  labelInTextCenter: 'In the center of the text:',
  labelAllowHyphenation: 'Allow hyphenation',
  labelShortestMatch: 'The shortest match',
  labelAfterSearchingText: 'After the text you are looking for there is:',
  labelEndSearchingText: 'This is the end of the text you are looking for:',
  labelSourceText: 'Text to be processed:',
  labelMatchResult: 'Processing result:',
  btnTestRegExp: 'Test',
  aboutProgramDescribe: 'Assistant for creating and testing regular expressions',
  anchors: 'Anchors',
  anchorsItem1: 'Start of string',
  anchorsItem2: 'Start of text',
  anchorsItem3: 'End of string',
  anchorsItem4: 'End of text',
  anchorsItem5: 'Word boundary',
  anchorsItem6: 'Not word boundary',
  anchorsItem7: 'Start of word',
  anchorsItem8: 'End of word',
  characterClasses: 'Character classes',
  characterClassesItem1: 'Control character',
  characterClassesItem2: 'White space',
  characterClassesItem3: 'Not white space',
  characterClassesItem4: 'Digit',
  characterClassesItem5: 'Not digit',
  characterClassesItem6: 'Word',
  characterClassesItem7: 'Not word',
  characterClassesItem8: 'Hexadecimal digit hh',
  characterClassesItem9: 'Octal digit xxx',
  posix: 'POSIX',
  posixItem1: 'Upper case letters',
  posixItem2: 'Lower case letters',
  posixItem3: 'All letters',
  posixItem4: 'Letters and digits',
  posixItem5: 'Digits',
  posixItem6: 'Hexadecimal digits',
  posixItem7: 'Punctuation',
  posixItem8: 'Space and tab',
  posixItem9: 'Blank characters',
  posixItem10: 'Control characters',
  posixItem11: 'Printed characters',
  posixItem12: 'Printed characters and spaces',
  posixItem13: 'Digits, letters and underscore',
  assertions: 'Assertions',
  assertionsItem1: 'Lookahead assertion',
  assertionsItem2: 'Negative lookahead',
  assertionsItem3: 'Lookbehind assertion',
  assertionsItem4: 'Negative lookbehind',
  assertionsItem5: 'Once-only subexpression',
  assertionsItem6: 'Condition [if then]',
  assertionsItem7: 'Condition [if then else]',
  assertionsItem8: 'Comment',
  quantifiers: 'Quantifiers',
  quantifiersItem1: '0 or more',
  quantifiersItem2: '0 or more, ungreedy',
  quantifiersItem3: '1 or more',
  quantifiersItem4: '1 or more, ungreedy',
  quantifiersItem5: '0 or 1',
  quantifiersItem6: '0 or 1, ungreedy',
  quantifiersItem7: 'Exactly 3',
  quantifiersItem8: '3 or more',
  quantifiersItem9: '3,4 or 5',
  quantifiersItem10: '3,4 or 5, ungreedy',
  specialCharacters: 'Special characters',
  specialCharactersItem1: 'Escape character',
  specialCharactersItem2: 'New line',
  specialCharactersItem3: 'Carriage return',
  specialCharactersItem4: 'Tab',
  specialCharactersItem5: 'Vertical tab',
  specialCharactersItem6: 'Form feed',
  specialCharactersItem7: 'Alarm',
  specialCharactersItem8: 'Backspace',
  specialCharactersItem9: 'Escape-symbol',
  specialCharactersItem10: 'Named character',
  stringReplacement: 'String replacement',
  stringReplacementItem1: 'nth non-passive group',
  stringReplacementItem2: '«xyz» in /^(abc(xyz))$/',
  stringReplacementItem3: '«xyz» in /^(?:abc)(xyz)$/',
  stringReplacementItem4: 'Before matched string',
  stringReplacementItem5: 'After matched string',
  stringReplacementItem6: 'Last matched string',
  stringReplacementItem7: 'Entire matched string',
  stringReplacementItem8: 'Entire original text',
  stringReplacementItem9: 'Symbol «$»',
  ranges: 'Groups and ranges',
  rangesItem1: 'Any character except new line (\\n)',
  rangesItem2: 'a or b',
  rangesItem3: 'Group',
  rangesItem4: 'Passive group',
  rangesItem5: 'Range (a or b or c)',
  rangesItem6: 'Not a or b or c',
  rangesItem7: 'Letter between a and q',
  rangesItem8: 'Upper case letter between A and Q',
  rangesItem9: 'Digit between 0 and 7',
  rangesItem10: 'nth group/subpattern',
  patternModifiers: 'Pattern modifiers',
  patternModifiersItem1: 'Global match',
  patternModifiersItem2: 'Case-insensitive',
  patternModifiersItem3: 'Multiple lines',
  patternModifiersItem4: 'Treat string as single line',
  patternModifiersItem5: 'Allow comments and white space in pattern',
  patternModifiersItem6: 'Evaluate replacement',
  patternModifiersItem7: 'Ungreedy pattern',
  metacharacters: 'Metacharacters (must be escaped)',
  metacharactersItem1: "Metacharacters escaped with '\\'",
};
